load_module /usr/lib/nginx/modules/ndk_http_module.so;
load_module /usr/lib/nginx/modules/ngx_http_lua_module.so;
pcre_jit on;

events {
    worker_connections  1024;
}

# Define the server block for HTTP
http {
    # Load the Lua script
    lua_package_path "/etc/nginx/?.lua;/usr/share/lua/5.1/?.lua;/usr/share/lua/5.1/?/init.lua;/usr/lib64/lua/5.1/?.lua;/usr/lib64/lua/5.1/?/init.lua;./?.lua;./?/init.lua;/usr/local/lib/lua/5.1/?.lua;/usr/local/lib/lua/5.1/?/init.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;;";
    lua_package_cpath "/usr/local/openresty/lualib/?.so;;";
    lua_shared_dict acme_storage 10m;

    server {
        listen 80;
        server_name example.com;
        return 301 https://$host$request_uri;
    }

    # Define the server block for HTTPS
    server {
        listen 443 ssl;

        server_name example.com;

        ssl_certificate /etc/nginx/certs/example.com.pem;
        ssl_certificate_key /etc/nginx/certs/nginx-flux.lootlink.xyz.key;

        # Enable TLSv1.3 only
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        # ssl_prefer_server_ciphers on;
        # ssl_ciphers "TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256";
        # ssl_ciphers TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256;
        ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS:TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256;

        # Enable OCSP stapling
        # ssl_stapling on;
        # ssl_stapling_verify on;
        # resolver 8.8.8.8;

        # Set the HSTS header
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";

        # Use the Lua script for ACME http-01 challenges
        location /.well-known/acme-challenge/ {
            default_type text/plain;
            content_by_lua_file /etc/nginx/acme-http01-nginx-webroot.lua;
        }

        # Proxy requests to the backend servers
        location / {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }
    }

    # Define the upstream backend servers
    upstream backend {
        #[SERVERS]
    }
}